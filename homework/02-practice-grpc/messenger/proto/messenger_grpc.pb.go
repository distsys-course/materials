// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: messenger.proto

package mes_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GRPCMessenger_SendMessage_FullMethodName  = "/mes_grpc.gRPCMessenger/SendMessage"
	GRPCMessenger_ReadMessages_FullMethodName = "/mes_grpc.gRPCMessenger/ReadMessages"
)

// GRPCMessengerClient is the client API for GRPCMessenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCMessengerClient interface {
	SendMessage(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	ReadMessages(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
}

type gRPCMessengerClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCMessengerClient(cc grpc.ClientConnInterface) GRPCMessengerClient {
	return &gRPCMessengerClient{cc}
}

func (c *gRPCMessengerClient) SendMessage(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, GRPCMessenger_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCMessengerClient) ReadMessages(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, GRPCMessenger_ReadMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCMessengerServer is the server API for GRPCMessenger service.
// All implementations must embed UnimplementedGRPCMessengerServer
// for forward compatibility
type GRPCMessengerServer interface {
	SendMessage(context.Context, *SendRequest) (*SendResponse, error)
	ReadMessages(context.Context, *ReadRequest) (*ReadResponse, error)
	mustEmbedUnimplementedGRPCMessengerServer()
}

// UnimplementedGRPCMessengerServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCMessengerServer struct {
}

func (UnimplementedGRPCMessengerServer) SendMessage(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedGRPCMessengerServer) ReadMessages(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMessages not implemented")
}
func (UnimplementedGRPCMessengerServer) mustEmbedUnimplementedGRPCMessengerServer() {}

// UnsafeGRPCMessengerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCMessengerServer will
// result in compilation errors.
type UnsafeGRPCMessengerServer interface {
	mustEmbedUnimplementedGRPCMessengerServer()
}

func RegisterGRPCMessengerServer(s grpc.ServiceRegistrar, srv GRPCMessengerServer) {
	s.RegisterService(&GRPCMessenger_ServiceDesc, srv)
}

func _GRPCMessenger_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMessengerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCMessenger_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMessengerServer).SendMessage(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCMessenger_ReadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMessengerServer).ReadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCMessenger_ReadMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMessengerServer).ReadMessages(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCMessenger_ServiceDesc is the grpc.ServiceDesc for GRPCMessenger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCMessenger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mes_grpc.gRPCMessenger",
	HandlerType: (*GRPCMessengerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _GRPCMessenger_SendMessage_Handler,
		},
		{
			MethodName: "ReadMessages",
			Handler:    _GRPCMessenger_ReadMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messenger.proto",
}
